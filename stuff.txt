mac                   |  windows
                      |
python3 -m venv .venv | py -3 -m venv .venv
. .venv/bin/activate  |.venv\Scripts\activate

pip install Flask

flask --app app run
flask --app app --debug run --port 8000


pip freeze > requirements.txt
pip install -r requirements.txt


wybór trybu (singleplayer, multiplayer, hotseat) -> wybór postaci -> kolejne walki az do smierci -> wynik postaci


wybór trybu -> kreacja postaci -> widok z traderami i arena do walk -> przyciski prowadzące do wyniku postaci, gdzie można dać level up dodać punkty do statystyk / może jakiś ekwipunek albo skille?? -> jakaś implementacja multiplayera

@app.route('/fight')
def fight():
    if session['key'] in games:
        game = games[session['key']]
        character = game.characters['fighter']  # Example
        enemy = game.enemies.get(game.levels[game.current_level]['enemy'])

        result = game.fight(character, enemy)

        if isinstance(result, tuple):
            character, enemy = result
            return render_template('singleplayer/fight.html', character=character, enemy=enemy)
        else:
            return result
    else:
        return redirect(url_for('index'))


    if session['key'] in games:
        game = games[session['key']]
        if game.next_level():
            return redirect(url_for('solo'))
        else:
            return "Congratulations! You completed all levels."
    else:
        return redirect(url_for('index'))





############### MULTIPLAYER #####################
#
# @app.route('/multiplayer')
# def multiplayer():
#     return render_template('multiplayer/matchmaking.html')
#
#
# @app.route('/multiplayer_start', methods=['POST', 'GET'])
# def multiplayer_start():
#     if session['key'] in games:
#         game = games[session['key']]
#         return render_template('multiplayer/multiplayer.html', player1=game.player1, player2=game.player2,
#                                enemy=game.enemies.get(game.levels[game.current_level]['enemy']),
#                                level=game.current_level, current_player=game.current_player)
#     return render_template('multiplayer/multiplayer.html')
#
#
# @app.route('/join_matchmaking', methods=['POST'])
# def join_matchmaking():
#     name = request.form['name']
#     character = request.form['character']
#
#     if name and character:
#         game = games[session['key']] if session['key'] in games else Game()
#         player = game.create_player(name, character)
#
#         # Check if there are enough players to start a game
#         if len(matchmaking_queue) == 1:
#             game.player1 = matchmaking_queue.pop(0)
#             game.player2 = player
#             game.current_player = game.player1
#             games[session['key']] = game
#
#             enemy, level = game.get_info()
#             return render_template('multiplayer/multiplayer.html', player1=game.player1, player2=game.player2,
#                                    enemy=enemy, level=level)
#         else:
#             # Check if player is already in the queue
#             if player not in matchmaking_queue:
#                 matchmaking_queue.append(player)
#             return render_template('multiplayer/waiting.html')
#     else:
#         return redirect(url_for('index'))
#
# @app.route('/join_matchmaking', methods=['POST'])
# def join_matchmaking():
#     name = request.form['name']
#     character = request.form['character']
#
#     if name and character:
#         game = games[session['key']] if session['key'] in games else Game()
#         player = game.create_player(name, character)
#
#         # Check if player is already in the queue
#         if player not in matchmaking_queue:
#             matchmaking_queue.append(player)
#
#         return redirect(url_for('matchmaking'))
#     else:
#         return redirect(url_for('index'))
#
#
# @app.route('/matchmaking')
# def matchmaking():
#     game = games[session['key']] if session['key'] in games else Game()
#
#     # Check if there are enough players to start a game
#     if len(matchmaking_queue) == 2:
#         game.player1 = matchmaking_queue.pop(0)
#         game.player2 = matchmaking_queue.pop(0)
#         game.current_player = game.player1
#         games[session['key']] = game
#
#         enemy, level = game.get_info()
#         return render_template('multiplayer/multiplayer.html', player1=game.player1, player2=game.player2,
#                                enemy=enemy, level=level)
#     else:
#         return render_template('multiplayer/waiting.html')
#
#
# @app.route('/multiplayer_fight')
# def multiplayer_fight():
#     if session['key'] in games:
#         game = games[session['key']]
#         player1 = game.player1
#         player2 = game.player2
#         enemy = game.enemies.get(game.levels[game.current_level]['enemy'])
#         current_player = game.current_player
#
#         if player1.is_alive() and player2.is_alive() and enemy.is_alive():
#             player, enemy = game.fight(current_player, enemy, is_not_solo=True)
#             if not player.is_alive():
#                 return redirect(url_for('game_over', result='lost'))
#             elif not enemy.is_alive():
#                 return redirect(url_for('between_levels_multiplayer'))
#             return redirect(url_for('multiplayer_start'))
#
#         else:
#             return redirect(url_for('index'))
#
#
# @app.route('/between_levels_multiplayer', methods=['POST', 'GET'])
# def between_levels_multiplayer():
#     if session['key'] in games:
#         game = games[session['key']]
#         if game.is_last_level():
#             return redirect(url_for('game_over', result='win'))
#         if request.method == 'POST':
#             player1_stat = request.form['player1_stat']
#             player2_stat = request.form['player2_stat']
#             game.player1.level_up(player1_stat)
#             game.player2.level_up(player2_stat)
#             return redirect(url_for('next_level_multiplayer'))
#         return render_template('multiplayer/between_levels_multiplayer.html', player1=game.player1,
#                                player2=game.player2)
#     else:
#         return redirect(url_for('index'))
#
#
# @app.route('/next_level_multiplayer', methods=['POST', 'GET'])
# def next_level_multiplayer():
#     if session['key'] in games:
#         game = games[session['key']]
#         game.next_level()
#         if game.current_level <= len(game.levels):
#             enemy, level = game.get_info()
#             return redirect(url_for('multiplayer_start'))
#         else:
#             return 'You won!'
#     else:
#         return redirect(url_for('index'))
#
#
############### MULTIPLAYER #####################
